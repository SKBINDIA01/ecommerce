// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Product {
  id              String       @id @default(uuid())
  name            String
  description     String       @db.Text
  category        String
  price           Float
  discountPercent Float?
  discountedPrice Float?
  frontImageUrl   String
  backImageUrl    String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  orderItems      OrderItem[]
}

model Order {
  id               String      @id @default(uuid())
  userId           String
  user             User        @relation(fields: [userId], references: [id])
  status           OrderStatus @default(PENDING)
  total            Float
  shippingEmail    String?
  shippingName     String?
  shippingAddress  String?
  shippingCity     String?
  shippingState    String?
  shippingPostalCode String?
  shippingCountry  String?
  shippingPhone    String?
  orderItems       OrderItem[]
  payment          Payment?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Payment {
  id                String        @id @default(uuid())
  orderId           String        @unique
  order             Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  amount            Float
  razorpayOrderId   String?
  razorpayPaymentId String?
  status            PaymentStatus @default(PENDING)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
